\documentclass{article}

\begin{document}

\section{IRIS DATA}

<<data,echo=FALSE,cache=TRUE,message=FALSE,warning=FALSE,results='asis'>>=

#example using Iris data
library(PPforest)
library(PPtree)
library(reshape)
library(plyr)
library(randomForest)


data.iris <- iris[,5:1]
training<- train_fn(iris[,5],.9)

result.boot.st <- mlply(data.frame(nt=c(5,10,50,100,500)), function(nt) {
  bootstrap_pp(data=data.iris,training=training,ntree=nt,index="LDA") 
   }  
)  

result.boot <- mlply(data.frame(nt=c(5,10,50,100,500)), function(nt) {
  bootstrap_pp(data=data.iris,training=training,ntree=nt,strata=FALSE,index="LDA") 
  
}  
)

Tree.result <- PP.Tree("LDA",iris[training,5],iris[training,1:4])
pp.cl <- PP.classify(iris[training,1:4],iris[training,5],Tree.result,1)


result.bagg.st <- llply(result.boot.st[1:5],bagging_pp,data=data.iris,result=result.boot.st,training=training)
result.bagg <- llply(result.boot[1:5],bagging_pp,data=data.iris,result=result.boot,training=training)

error <- sapply(result.bagg,function(x) x[[1]][1] )
error.st <- sapply(result.bagg.st,function(x) x[[1]][1] )


###




@


<<table.res,echo=FALSE,dependson='data',results='asis'>>=
library(xtable)
aux <- c(5,10,50,100,500)

aaa<-xtable(cbind(aux,error,error.st),digits=5,caption="OOB error for PP.bagging with bootstrap samples without strata and with strata")
###
print(aaa,caption.placement="top",include.rownames=TRUE,include.colnames=TRUE)

@

Ussing PPtree with LDA the error is 0
<<pp.iris,dependson='data',echo=TRUE,message=FALSE,warning=FALSE>>=
library(PPtree)
Tree.result <- PP.Tree("LDA",iris[training,5],iris[training,1:4])
test <- iris[-training,]
res<-PP.classify(test[,1:4],test[,5],Tree.result,1)
print(res[[1]]/length(res[[2]]))
@

Ussing the same data we run a random forest and the oob error is around 6\%.
<<rf.iris,depenson="data'",echo=FALSE,message=FALSE,warning=FALSE>>=
library(randomForest)
rf.iris<-randomForest(Species ~ ., data=iris[training,], importance=TRUE,
                     proximity=TRUE,strata=Specie)
print(rf.iris)
@

  
\newpage

\section{OLIVE DATA}
<<olive,cache=TRUE,echo=FALSE,results='asis',message=FALSE,warning=FALSE>>=
 load("olive.rda")
library(ggplot2)
d.olive2 <- subset(d.olive,Region%in%c(1,2))[,-2]
d.olive2$Region <- factor(d.olive2$Region)

training <- train_fn(d.olive2[,1],.9)



result.boot2.st <- mlply(data.frame(nt=c(5,10,50,100,500)), function(nt) {
  bootstrap_pp(data=d.olive2,training=training,ntree=nt,index="LDA") 
}  
)  

result.boot2 <- mlply(data.frame(nt=c(5,10,50,100,500)), function(nt) {
  bootstrap_pp(data=d.olive2,training=training,strata=FALSE,ntree=nt,index="LDA") 
}  
)  

result.bagg2.st <- llply(result.boot2.st[1:5],bagging_pp,data=d.olive2,result=result.boot2.st,training=training)
result.bagg2 <- llply(result.boot2[1:5],bagging_pp,data=d.olive2,result=result.boot2,training=training,strata=FALSE)

error <- sapply(result.bagg2,function(x) x[[1]][1] )
error.st <- sapply(result.bagg2.st,function(x) x[[1]][1] )



@


<<table.olive,echo=FALSE,dependson='olive',results='asis',message=FALSE,warning=FALSE>>=
library(xtable)
aux <- c(5,10,50,100,500)

aaa<-xtable(cbind(aux,error,error.st),digits=5,caption="OOB error for PP.bagging with bootstrap samples without strata and with strata")
###
print(aaa,caption.placement="top",include.rownames=TRUE,include.colnames=TRUE)

@

Using PPtree function I do not know why I have this big error?????
<<pp.olive,dependson='olive',cache=TRUE,echo=FALSE>>=
library(PPtree)
Tree.result <-  PP.Tree("PDA",d.olive2[training,1],d.olive2[training,2:9],lambda=1)



test <- d.olive2[-training,]
res<-PP.classify(d.olive2[training,2:9],d.olive2[training,1],Tree.result,1)
print(res[[1]]/length(res[[2]]))

@
Using random forest the OOb error us 0\%

<<rf.olive,dependson='olive',cache=TRUE,echo=FALSE>>=
library(randomForest)

rf <- randomForest(Region ~ ., data=d.olive2[training,], importance=TRUE,strata=Region,
             proximity=TRUE)

print(rf )

@

\newpage

\section{SIMULATE DATA}
<<normal,echo=FALSE,cache=TRUE,results='asis',message=FALSE,warning=FALSE>>=
library(mvtnorm)
library(ggplot2)

sigma.x <- matrix(c(4,3,3,4), ncol=2)
sigma.y <- matrix(c(4,3,3,4), ncol=2)

x <- rmvnorm(n=500, mean=c(1,2), sigma=sigma.x, method="chol")
y <- rmvnorm(n=500, mean=c(5,16), sigma=sigma.y, method="chol")
auxx<-rep("x",dim(x)[1])
auxy<-rep("y",dim(x)[1])

dat.pl<-rbind(data.frame(aux=auxx,x=x),data.frame(aux=auxy,x=y))

qplot(x=x.1,y=x.2,data=dat.pl,col=aux)

@


<<res.normal,dependson='normal',echo=FALSE,cache=TRUE,results='asis',message=FALSE,warning=FALSE>>=
library(PPforest)
library(PPtree)
library(reshape)
library(plyr)



training<- train_fn(dat.pl[,1],.9)

result.boot.st <- mlply(data.frame(nt=c(5,10,50,100,500)), function(nt) {
  bootstrap_pp(data=dat.pl,training=training,ntree=nt,index="LDA") 
   }  
)  

result.boot <- mlply(data.frame(nt=c(5,10,50,100,500)), function(nt) {
  bootstrap_pp(data=dat.pl,training=training,ntree=nt,strata=FALSE,index="LDA") 
  
}  
)

Tree.result <- PP.Tree("LDA",dat.pl[training,1],dat.pl[training,2:3])
pp.cl <- PP.classify(dat.pl[training,2:3],dat.pl[training,1],Tree.result,1)


result.bagg.st <- llply(result.boot.st[1:5],bagging_pp,data=dat.pl,result=result.boot.st,training=training)
result.bagg <- llply(result.boot[1:5],bagging_pp,data=dat.pl,result=result.boot,training=training)

error <- sapply(result.bagg,function(x) x[[1]][1] )
error.st <- sapply(result.bagg.st,function(x) x[[1]][1] )


###



@
Zero error with the PPbagging
<<pp.normal,dependson='normal',echo=FALSE,dependson='data',results='asis'>>=
library(xtable)
aux <- c(5,10,50,100,500)

aaa<-xtable(cbind(aux,error,error.st),digits=5,caption="OOB error for PP.bagging with bootstrap samples without strata and with strata")
###
print(aaa,caption.placement="top",include.rownames=TRUE,include.colnames=TRUE)

@


Using PPtree also zero error
<<pp.normalito,dependson='normal',cache=TRUE>>=
library(PPtree)
Tree.result <-  PP.Tree("PDA",dat.pl[training,1],dat.pl[training,2:3],lambda=1)



test <- dat.pl[-training,]
res<-PP.classify(dat.pl[training,2:3],dat.pl[training,1],Tree.result,1)
print(res[[1]]/length(res[[2]]))

@


Zero error with Random Forest
<<rf.norm,dependson='normal',cache=TRUE,echo=FALSE>>=
library(randomForest)

rf <- randomForest(aux ~ ., data=dat.pl[training,], importance=TRUE,strata=aux,
             proximity=TRUE)

print(rf )

@
\end{document}